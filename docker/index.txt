介绍 : http://www.docker.org.cn/book/docker/what-is-docker-16.html

1.简介:
	Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。
  应用场景:
  	web应用的自动化打包和发布；
	自动化测试和持续集成、发布；
	在服务型环境中部署和调整数据库或其他的后台应用；
	从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。

2.安装
    sudo apt install docker.io //根据不同的系统进行安装
	yum install -y epel-relase //安装依赖
	yum install docker-io	//安装docker
	service docker start //启动docker,根据安装方式不同启动命令也有不同
	systemctl restart docker.service
	
	docker version //查看当前版本
	docker search php-7.0 //搜索包名
	docker pull php-7.0 //拉取包
	docker images php-7.0 //查看拉取的安装包
    docker images //查看安装包

	docekr rmi php-7 //删除包
	docker ps //查看运行的容器
	docker ps -a //所有
	docker logs (容器ID)
	
	docker rm myPHP //删除myPHP容器
	
	docker stop <容器名orID>
	docker start <容器名orID>
	docker kill <容器名orID>
	docker restart <容器名orID>

    容器IP的查方法
	docker inspect 容器ID或容器名 |grep '"IPAddress"'
    docker ps -aqf 'name=运行容器设置的名字' (查找对应名称的容器ID)

    进入容器
    docker exec -it 容器ID /bin/sh
    sudo docker exec -it 容器ID /bin/bash

    docker中没有 vi|vim
    apt-get install vi (安装)
    apt-get update (更新)
    apt-get install -y vim
    apt-get install vi (安装)

3.运行容器(具体命令还需查看docker -h)

    docker run -p 80:80  swoft/swoft(如果本地没有swoft,那么docker会自动去拉取并且启动)
    docker run -p 80:80 --name swoft -d swoft/swoft(如果本地没有swoft,那么docker会自动去拉取并且启动)
    docker run -p 80:80 --name swoft -v /data/nginx/html/swoft/swoft:/var/www/swoft swoft/swoft

	#运行docker
	#把服务器8080端口映射到容器的80 名字为 test_nginx
	#本地html映射容器html地址(容器html地址可以进入容器查看)(文件是同步的:在本机操作后docker中的文件会同步操作)
	#运行镜像 可以通过 docker images查看默认为latest 手动指定 -d docker.io/php:7.1-fpm (REPOSITORY:TAG) docker.io为默认可省
    docker run -p 8080:80 --name test_nginx -v /data/nginx/html:/usr/share/nginx/html -d docker.io/nginx
        -p      8000:80 把容器80端口映射到服务8000
        --name  设置名字
        -d      运行镜像(后台运行)
        -v /data/nginx/html:/usr/share/nginx/html (将本机的文件映射到容器中的文件)

    docker nginx 默认地址:  /usr/share/nginx/html /etc/nginx/nginx.conf /var/log/nginx /etc/nginx/conf.d

    [
        docker run --name testName -d -p 8080:80 -v /data/nginx/html:/usr/share/nginx/html -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf  -v /data/nginx/logs:/var/log/nginx -v /data/nginx/conf.d:/etc/nginx/conf.d -d docker.io/nginx
	]
	[
	    docker run -p 8080:80 --name nginxweb -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/conf.d/:/etc/nginx/conf.d/ -v /www:/www -v /root/nginx/logs/:/home/nginx/logs/ nginx
	]
    [
        docker run -p 9000:9000 --name  php-fpm -v /data/nginx/html:/usr/share/nginx/html -d docker.io/php:7.1-fpm
    ]

    eg: nginx+php+mysql(对应指向本机的html地址要相同)

        docker search php:7.1-fpm
        docker search nginx
        docker search mysql

        docker pull nginx
        docker pull php:7.1-fpm
        docker pull mysql:5.7

        nginx : docker run -p 8080:80 --name test_nginx -v /data/nginx/html:/usr/share/nginx/html -d docker.io/nginx
                (将服务起8081端口映射到容器的81端口,nginx配置端口为81,浏览器访问端口为8081)
        php:    docker run -p 9000:9000 --name  php-fpm -v /data/nginx/html:/usr/share/nginx/html -d docker.io/php:7.1-fpm
            (将服务起9001端口映射到容器的9001端口,nginx的PHP配置端口为9000或者9001,未知调试)
        mysql:  docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7
        //docker run -p 3306:3306 --name mymysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7
        nginx配置：
              	fastcgi_pass  172.17.0.3:9000;(对应容器中php的ip地址)
              	//对应指向的nginx目录地址
          		fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
        启动

    eg:
        常规:
            docker run -p 8080:80 --name ng80 -d docker.io/nginx(拉取下来的包)
            echo `docker ps -aqf 'name=ng80'`>docker80.log  #记录对应的容器ID
            docker stop `cat docker80.log`
            nginx默认挂载: /etc/nginx/conf.d/ 容器里面
        自定义:
            alias ng80-s="docker run -p 8080:80 --name ng80 -d docker.io/nginx &&  echo `docker ps -aqf 'name=ng80'`>/min/docker/d80.log"
            alias ng80-t="docker stop `cat d80.log` && docker rm `cat /min/docker/d80.log` && echo ''>/min/docker/d80.log"
4.issue:
	    1. could not change group /var/run/docker.sock to docker: group docker not found

	       uname -r 查看内核
	       Why:SELinux不支持 overlay2 graph driver
	       Solve: vi /etc/sysconfig/docker
	       在docker里禁用selinux-enabled=false,

	       eg:
	       OPTIONS='--selinux-enabled=false --log-driver=journald --signature-verification=false'
           if [ -z "${DOCKER_CERT_PATH}" ]; then
               DOCKER_CERT_PATH=/etc/docker
           fi

        2. /usr/bin/docker-current: Error response from daemon: error creating overlay mount to /var/lib/docker/overlay2/b35b5d54a4bb354ff5bbf4b8906db3acce819339c8c9bf378d9e388d9dedbed7-init/merged: invalid argument.
           Solve:
                rm -rf /var/lib/docker  #会删除docker images
                vi /etc/sysconfig/docker-storage   指定  DOCKER_STORAGE_OPTIONS="--storage-driver overlay"
                vi  /etc/sysconfig/docker 删除 --selinux-enabled



5.安装PHP扩展

    进入容器 docker exec -it php-fpm /bin/bash
    有安装源的:docker-php-ext + tab (docker自带的PHP安装扩展命令)
    无: pecl install swoole
        echo extension=swoole.so > php.ini

    docker-php-source delete (删除安装包,避免docker过大)

6.docker-compose安装(https://docs.docker.com/compose/completion/)

  compose是一个定义和运行多容器的docker应用的工具。
  compose 通过yaml文件配置应用服务，然后仅需一个命令就可以创建和运行所有配置中的服务。

  下载:(https://github.com/docker/compose/releases)
  sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose

  更改权限
  sudo chmod +x /usr/local/bin/docker-compose

  命令插件(可省)
  sudo curl -L https://raw.githubusercontent.com/docker/compose/1.21.2/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose

  测试
  docker-compose --version


