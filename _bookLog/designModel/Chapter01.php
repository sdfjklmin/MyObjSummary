<?php


namespace bookLog\designModel;

/**
 * Class Chapter01
 * @package bookLog\designModel
 * 前言：
 *  构建可复用的设计模式。（灵活、优雅、复用性更好）
 *  不是解决所有的事情都要重头开始。可以借鉴已有成功的模式。
 * 1.1 什么是设计模式（模式的核心都在于提供了相关问题的解决方案）
 *  Christopher Alexander （建筑领域） ：
 *      每一个模式描述了一个我们周围不断发生的问题，以及该问题的解决核心。
 *      这样，你就能一次又一次地使用该方案而不是重复的劳动。
 *  模式的四个要素:
 *      模式名称(一般要求见名知意)[模式名可以帮助我们思考，便于我们与其他人交流设计思想及设计结果]、
 *      问题[描述了应该在何时使用模式]、
 *      解决方案[描述了设计的组成成分，它们之间的相互关系及各自的职责和协作方式]、
 *      效果[了模式应用的效果及使用模式应权衡的问题]。
 *  多维度:
 *      出发点的不同会产生对什么是模式和什么不是模式的理解不同
 *  应用:
 *      每一个设计模式都集中于一个特定的面向对象设计问题或设计要点，
 *      描述了什么时候使用它，
 *      在另一些设计约束条件下是否还能使用，以及使用的效果和如何取舍
 *  若我们采用过程式语言，可能就要包括诸如“继承”、“封装”和“多态”的设计模式
 *  但通常我们是以面向对象设计的
 *
 * 1.2 MVC的设计模式
 *    C -组合对于的数据-> M2(module) -提供功服务->S(server) -数据模型操作-> M(model|应用对象) -模型数据的显示变化-> V(view|视图) -前置操作-> C(controller|定义用户界面对用户输入的响应方式)
 *
 * 1.3 描述设计模式
 *   模式名和分类,意图,别名,动机,适用性,结构,参与者,协作,效果,实现,代码示例,已知应用,相关模式
 *
 * 1.4 设计模式的
 *
 * Abstract Factory：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。
 * Adapter：将一个类的接口转换成客户希望的另外一个接口。 Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
 * Bridge：将抽象部分与它的实现部分分离，使它们都可以独立地变化。
 * Builder：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
 * Chain of Responsibility：为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。
 * Command：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。
 * Composite：将对象组合成树形结构以表示“部分 -整体”的层次结构。Composite使得客户对单个对象和复合对象的使用具有一致性。
 * Decorator：动态地给一个对象添加一些额外的职责。就扩展功能而言， Decorator模式比生成子类方式更为灵活。
 * Facade：为子系统中的一组接口提供一个一致的界面， Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
 * Factory Method：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。
 * Factory Method：使一个类的实例化延迟到其子类。
 * Flyweight：运用共享技术有效地支持大量细粒度的对象。
 * Interpreter：给定一个语言 , 定义它的文法的一种表示，并定义一个解释器 , 该解释器使用该表示来解释语言中的句子。
 * Iterator：提供一种方法顺序访问一个聚合对象中各个元素 , 而又不需暴露该对象的内部表示。
 * Mediator：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。
 * Memento：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。
 * Observer：定义对象间的一种一对多的依赖关系 ,以便当一个对象的状态发生改变时 ,所有依赖于它的对象都得到通知并自动刷新。
 * Prototype：用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。
 * Proxy：为其他对象提供一个代理以控制对这个对象的访问。
 * Singleton：保证一个类仅有一个实例，并提供一个访问它的全局访问点。
 * State：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。
 * Strategy：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户。
 * Template Method：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。
 * Template Method：使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
 * Visitor：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
 */
class Chapter01
{

}