如图aliMiddle.png所示:
    共5个实例即5个篮框所示,涉及的服务有
    etcd(服务注册/发现) provider(服务提供者) consumer(服务消费者) agent(代理)

具体工作流程:
    Provider 是服务提供者，Consumer是服务消费者，Consumer 消费 Provider 提供的服务。
    Agent 是 Consumer 和 Provider 服务的代理，每个 Consumer 或 Provider 都会伴随一个共生的 Agent。
    etcd 是注册表服务，用来记录服务注册信息。
    从图中可以看出，Consumer 与 Provider 之间的通讯并不是直接进行的，而是经过了 Agent 的中转。
    这看似多余的一环，却在 Service Mesh 的架构中扮演着举足轻重的角色。

Agent职责:
    负载均衡:
        蓝色方框的大小代表了容器的性能。一个Consumer 实例的性能是三个Provider 实例性能的总和。
        而且三个 Provider 的性能又是以1:2:3的比例分配的。
        若系统性能是60，则 Consumer 占30，Provider(small) 占 5，Provider(medium) 占10，Provider(large) 占15。
        因此任何一个 Provider 服务的性能都比 Consumer 要小，Agent 必须做到负载均衡才能保证任意一个 Provider 服务不会被压垮。
    服务注册与发现:
        服务注册与发现是微服务的核心能力，Consumer Agent 具体要访问哪一个 Provider Agent 不是在配置文件中写死的，而是动态发现的。
        当Agent 启动的时候，需要将自己的信息写入 etcd 注册表，在服务调用发生的时候，
        再从 etcd 中读取相关的注册信息，这个过程就是最简单的服务注册与发现。
    协议转换:
        Service Mesh 的一大特色就是可以实现不同语言、不同框架、不同协议间服务的互联互通，靠的就是其协议转换的能力。
        在设定的场景中，Consumer 使用 HTTP 协议，而 Provider 使用 Dubbo 协议，在没有 Agent 帮助的情况下，他们之间是无法通信的。
    流量控制：
        控制流入provider中的流量，以免造成provider的服务中断。
    服务降级或熔断：
        降级或熔断作为一个服务容错率处理
    安全认证：
        保证各个实例安全运行
跑分：
    跑分环境是由一台 4 核 8G 的施压机和一台 8 核 16G 的被压机组成。所有 5 个 Docker 实例均运行在被压机上。每个项目的每一次跑分会独占一台被压机。
    流程大致如下：
         准备跑分环境，创建并锁定工作区
         根据提交的地址，从镜像仓库中拉取镜像
         验证 Provider、Consumer 及启动脚本文件的签名，以妨被篡改
         启动 etcd 实例，并验证服务可用性
         启动三个 Provider 实例，并验证服务可用性
         启动 Consumer 实例，并验证服务可用性
         以最高并发数对系统进行预热
         分若干次不同的压力水平，对系统进行压力测试，并记录 QPS 值
         取最优的 QPS 作为最终的跑分结果，并上报给天池系统
         按顺序依次停止 Consumer 实例、三个 Provider 实例和 etcd 实例
         清理 Docker 实例及镜像
         收集日志并上传到 OSS
         解锁工作区，清理环境
优化：
    使用协程。协程可以理解为轻量级的线程，可以节约因为线程切换而造成的性能损失。
    使用异步通讯。Agent 与 Agent 之间的通讯机制完全由选手自行控制，采用非阻塞的异步通讯机制可以有效提高系统性能。
    使用缓存。合理缓存响应结果，当相同的请求再次到来的时候，调用链可以不必经过系统中的每一个节点，从而尽快返回。